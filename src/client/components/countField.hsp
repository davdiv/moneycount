var klass = require("hsp/klass");
var hsp = require("hsp/rt");
var formatCurrency = require("../utils/formatCurrency.hsp.js");

var CountFieldController = klass({
    attributes : {
        unitValue : {
            binding : "1-way",
            type : "float"
        },
        number : {
            binding : "2-way",
            type : "int"
        },
        error : {
            binding : "2-way",
            type : "boolean"
        },
        onchange : {
            type : "callback"
        }
    },
    $init : function () {
        this.onNumberChange();
    },
    onUnitValueChange : function () {
        this.update();
    },
    onNumberChange : function () {
        // change from the data model
        this.stringNumber = this.number + "";
        this.update();
    },
    onStringNumberChange : function () {
        // change from the user when typing
        this.number = parseInt(this.stringNumber, 10);
        this.update();
        this.onchange();
    },
    update : function () {
        this.total = this.unitValue * this.number;
        this.error = !(typeof this.number == "number") || isNaN(this.number);
    },
    blur : function () {
        if (!this.error) {
            this.stringNumber = this.number + "";
        }
    },
    add : function (value) {
        var res = this.number + value;
        if (res >= 0) {
            this.number = res
        }
        this.onchange();
    },
    clickSign : function (evt, amount) {
        this.add(amount);
        this.clickAmount(evt);
    },
    clickAmount : function (evt) {
        hsp.refresh();
        var field = evt.currentTarget.parentNode.parentNode.getElementsByTagName("input")[0];
        field.focus();
        field.select();
        evt.preventDefault();
    },
    preventDefault : function (evt) {
        evt.preventDefault();
    },
    fieldKeyDown : function (evt) {
        var keyCode = evt.keyCode;
        if (keyCode == 38 || keyCode == 40) { // up or down
            this.add(39 - keyCode); // +1 or -1
            hsp.refresh();
            var field = evt.target;
            field.focus();
            field.select();
            evt.preventDefault();
        }
    }

});

# template countField using c:CountFieldController
<div class="input-group" style="margin:5px;">
<div class="input-group-btn" onmousedown="{c.preventDefault(event)}">
<button type="button" class="btn btn-default" onclick="{c.clickSign(event,-1)}" tabindex="-1"><span class="glyphicon glyphicon-minus"></span></button>
<button type="button" class="btn btn-default" onclick="{c.clickAmount(event)}" tabindex="-1" style="min-width:90px;">{formatCurrency(c.unitValue)}</button>
<button type="button" class="btn btn-default" onclick="{c.clickSign(event,1)}" tabindex="-1"><span class="glyphicon glyphicon-plus"></span></button>
</div>
<input type="text" value="{c.stringNumber}" onblur="{c.blur()}" onkeydown="{c.fieldKeyDown(event)}" class="form-control" style="text-align:right;"/>
<span class="input-group-addon" style="min-width:90px;text-align:right;">{formatCurrency(c.total)}</span>
</div>
# /template


module.exports = countField;
